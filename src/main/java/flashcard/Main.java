package flashcard;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Scanner;

/**
 * Flashcard —Å—É—Ä–≥–∞–ª—Ç—ã–Ω –ø—Ä–æ–≥—Ä–∞–º—ã–Ω “Ø–Ω–¥—Å—ç–Ω –≥“Ø–π—Ü—ç—Ç–≥—ç–≥—á –∫–ª–∞—Å—Å.
 * –ö–æ–º–∞–Ω–¥—ã–Ω –º”©—Ä”©”©—Ä –∞–∂–∏–ª–ª–∞—Ö CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏–π–≥ –¥—ç–º–∂–¥—ç–≥.
 */
public class Main {
    public static void main(String[] args) {
        // –¢—É—Å–ª–∞–º–∂ –º—ç–¥—ç—ç–ª—ç–ª ”©–≥”©—Ö –Ω”©—Ö—Ü”©–ª —à–∞–ª–≥–∞—Ö
        if (args.length == 0 || Arrays.asList(args).contains("--help")) {
            System.out.println("\uD83D\uDCDA –ê—à–∏–≥–ª–∞—Ö –∑–∞–∞–≤–∞—Ä: flashcard <cards-file> [options]");
            System.out.println("--help               –¢—É—Å–ª–∞–º–∂ —Ö–∞—Ä—É—É–ª–∞—Ö");
            System.out.println("--order <type>       –î–∞—Ä–∞–∞–ª–∞–ª: random, worst-first, recent-mistakes-first (default: random)");
            System.out.println("--repetitions <num>  –ö–∞—Ä—Ç –±“Ø—Ä–∏–π–≥ —Ö—ç–¥—ç–Ω —É–¥–∞–∞ –∑”©–≤ —Ö–∞—Ä–∏—É–ª–∞—Ö —ë—Å—Ç–æ–π (default: 1)");
            System.out.println("--invertCards        –ê—Å—É—É–ª—Ç, —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ —Å–æ–ª–∏—Ö (default: false)");
            return;
        }

        // CLI –ø–∞—Ä–∞–º–µ—Ç—Ä“Ø“Ø–¥–∏–π–Ω –∞–Ω—Ö–Ω—ã —É—Ç–≥—É—É–¥
        String filePath = args[0];
        String order = "random";
        int repetitions = 1;
        boolean invertCards = false;

        // CLI –∞—Ä–≥—É–º–µ–Ω—Ç—É—É–¥—ã–≥ —à–∞–ª–≥–∞—Ö, —Ç–æ—Ö–∏—Ä—É—É–ª–≥–∞ —Ö–∏–π—Ö
        for (int i = 1; i < args.length; i++) {
            switch (args[i]) {
                case "--order":
                    if (i + 1 < args.length) {
                        order = args[++i];
                    }
                    break;
                case "--repetitions":
                    if (i + 1 < args.length) {
                        repetitions = Integer.parseInt(args[++i]);
                    }
                    break;
                case "--invertCards":
                    invertCards = true;
                    break;
            }
        }

        // –ö–∞—Ä—Ç—É—É–¥—ã–Ω –∂–∞–≥—Å–∞–∞–ª—Ç “Ø“Ø—Å–≥—ç—Ö
        List<Card> cards = new ArrayList<>();

        // –ö–∞—Ä—Ç—É—É–¥—ã–≥ —Ñ–∞–π–ª–Ω–∞–∞—Å —É–Ω—à–∏—Ö
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split("\\|");
                if (parts.length == 2) {
                    cards.add(new Card(parts[0].trim(), parts[1].trim()));
                }
            }
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è –§–∞–π–ª—ã–≥ —É–Ω—à–∏–∂ —á–∞–¥—Å–∞–Ω–≥“Ø–π: " + e.getMessage());
            return;
        }

        System.out.println("\u2705 –ù–∏–π—Ç " + cards.size() + " –∫–∞—Ä—Ç –∞—á–∞–∞–ª–ª–∞–∞!");

        // –ö–∞—Ä—Ç—É—É–¥—ã–≥ —Å–æ–Ω–≥–æ—Å–æ–Ω —Ç”©—Ä–ª”©”©—Ä —ç—Ä—ç–º–±—ç–ª—ç—Ö
        if (order.equals("random")) {
            Collections.shuffle(cards);
        } else if (order.equals("recent-mistakes-first")) {
            new RecentMistakesFirstSorter().organize(cards);
        } else if (order.equals("worst-first")) {
            cards.sort((a, b) -> Integer.compare(b.getIncorrectCount(), a.getIncorrectCount()));
        }

        // –•—ç—Ä—ç–≥–ª—ç–≥—á—Ç—ç–π —Ö–∞—Ä–∏–ª—Ü–∞–Ω –∞—Å—É—É–ª—Ç —Ç–∞–≤–∏—Ö —Ö—ç—Å—ç–≥
        Scanner scanner = new Scanner(System.in);

        for (Card card : cards) {
            int correctCount = 0;
            while (correctCount < repetitions) {
                String question = invertCards ? card.getAnswer() : card.getQuestion();
                String answer = invertCards ? card.getQuestion() : card.getAnswer();

                System.out.println("\n\uD83D\uDD39 –ê—Å—É—É–ª—Ç: " + question);
                System.out.print("–¢–∞–Ω—ã —Ö–∞—Ä–∏—É–ª—Ç: ");
                String userAnswer = scanner.nextLine().trim();

                if (userAnswer.equalsIgnoreCase(answer)) {
                    System.out.println("\u2705 –ó”©–≤!");
                    card.markCorrect();
                    card.increaseStreak(); // üëà –®–∏–Ω—ç—ç—Ä –Ω—ç–º—ç–≥–¥—Å—ç–Ω
                    correctCount++;
                } else {
                    System.out.println("‚ùå –ë—É—Ä—É—É. –ó”©–≤ —Ö–∞—Ä–∏—É–ª—Ç: " + answer);
                    card.markIncorrect();
                    card.resetStreak(); // üëà –ó”©–≤ —Ö–∞—Ä–∏—É–ª—Ç —Ç–∞—Å–∞—Ä—Å–∞–Ω
                }
                
            }
        }

        scanner.close();

        // –ê–º–∂–∏–ª—Ç —à–∞–ª–≥–∞—Ö —Ö—ç—Å—ç–≥
        boolean allCorrect = true;
        boolean hasRepeat = false;
        boolean hasConfident = false;
       
        for (Card card : cards) {
            if (card.getIncorrectCount() > 0) allCorrect = false;
            if (card.getTotalAttempts() > 5) hasRepeat = true;
            if (card.getStreak() >= 3) hasConfident = true;
        }
        

        System.out.println("\n\uD83C\uDFC5 –ê–º–∂–∏–ª—Ç:");
        if (allCorrect) System.out.println("\uD83C\uDFC6 CORRECT ‚Äì –ë“Ø—Ö –∫–∞—Ä—Ç—ã–≥ –∑”©–≤ —Ö–∞—Ä–∏—É–ª—Å–∞–Ω!");
        if (hasRepeat) System.out.println("üîÅ REPEAT ‚Äì –ù—ç–≥ –∫–∞—Ä—Ç–∞–¥ 5-–∞–∞—Å –æ–ª–æ–Ω —É–¥–∞–∞ —Ö–∞—Ä–∏—É–ª—Å–∞–Ω!");
        if (hasConfident) System.out.println("\uD83D\uDCAA CONFIDENT ‚Äì –ù—ç–≥ –∫–∞—Ä—Ç–∞–¥ 3-–∞–∞—Å –¥—ç—ç—à —É–¥–∞–∞ –∑”©–≤ —Ö–∞—Ä–∏—É–ª—Å–∞–Ω!");
    }
}
